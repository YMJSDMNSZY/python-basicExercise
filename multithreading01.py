# -*- coding=utf-8 -*-

'''
线程，有时被称为轻量进程(Lightweight Process,LWP)，是程序执行流的最小单元。
一个标准的线程由线程ID，当前指令指针(PC)，寄存器集合和堆栈组成。
另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，
只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。
一个线程可以创建和撤消另一个线程，同一进程中的多个线种之间可以并发执行。由于线程之间的相互制约，
致使线程在运行中呈现出间断性。线程也有就绪、阻塞和运行三种基本状态。就绪状态是指线程具备运行的所有条件，
逻辑上可以运行，在等待处理机:运行状态是指线程占有处理机正在运行;阻塞状态是指线程在等待一个事件（如某个信号量)，
逻辑上不可执行。每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。
线程是程序中一个单一的顺序控制流程。进程内有一个相对独立的、可调度的执行单元，
是系统独立调度和分派CPU的基本单位指令运行时的程序的调度单位。在单个程序中同时运行多个线程完成不同的工作，
称为多线程



线程是程序中一个单一的顺序控制流醒。进程内有一个相对独立的、可调度的执行单元，
是系统独立调度和分派CPU的基本单位指令运行时的程序的调度单位。在单个程序中同时运行多个线程完成不同的工作，
称为多线程


多线程:多线程（英语:multithreading)，是指从软件或者硬件上实现多个线程并发执行的技术。
具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具
有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理(Chip-level multithreading）或
同时多线程
(Simultaneous multithreading）处理器。在一个程序中，这些独立运行的程序片段叫作"线程”(Thread) ,
利用它编程的概念就叫作"多线程处理(Multithreading) "。具有多线程能力的计算机
因有硬件支持而能够在同一时间执行多于一个线程（台湾译作"执行绪”)，进而提升整体处理性能


·优点:
。使用线程町以把占据长时间的程序中的任务放到后台去处理。
。用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度
。程序的运行速度可能加快
。在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。
在这种情况下我们可以释放一些珍贵的资源如内存占用等等。
Python通过两个标准库thread和threading提供对线程的支持。thread提供了低级别的、原始的线程以及一个简单的锁。


'''

import threading

#进程:Process
#线程：threading
from time import sleep


def download(n):
    images=['ruwi.492','rjiw.4239','492.hfie']
    for image in images:
        print('正在下载：',image)
        sleep(n)
        print('下载{}成功！'.format(image))

def listenMusic():
    musics=['大碗宽面','kaom222ianjinh','2222']
    for music in musics:
        sleep(0.5)
        print('正在听{}歌！'.format(music))

if __name__ == '__main__':

    #成功创建了一个线程对象
    t=threading.Thread(target=download,name='瞎子啊',args=(1,))
    t.start()

    t1=threading.Thread(target=listenMusic,name='瞎啊')
    t1.start()

    # n1=1
    # while True:
    #     print(n1)
    #     sleep(1.5)
    #     n1+=1


